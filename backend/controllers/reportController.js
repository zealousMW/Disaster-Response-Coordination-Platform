import supabase from "../config/supabaseClient.js";
import { logger } from "../utils/logger.js";

export const getReports = async (req, res, next) => {

     const { id } = req.params;
    try {
        const { data, error } = await supabase
            .from('reports')
            .select('*')
            .eq('disaster_id', id)
            .order('created_at', { ascending: false });

        if (error) {
            logger.error('Error fetching reports', { error: error.message, disasterId: id });
            return next(error);
        }

        logger.info('Reports fetched successfully', { count: data.length, disasterId: id });
        res.status(200).json(data);

  
}
    catch (dbError) {
        logger.error('Database error fetching reports', { error: dbError.message, disasterId: id });
        next(dbError);
    }

}

// create table public.reports (
//   id bigint generated by default as identity not null,
//   created_at timestamp with time zone not null default now(),
//   disaster_id bigint null,
//   user_id text null,
//   content text null,
//   image_url text null,
//   verification_status text not null default 'pending'::text,
//   constraint reports_pkey primary key (id),
//   constraint reports_disaster_id_fkey foreign KEY (disaster_id) references disasters (id) on delete CASCADE
// ) TABLESPACE pg_default;

// create index IF not exists reports_disaster_id_idx on public.reports using btree (disaster_id) TABLESPACE pg_default;

export const createReport = async (req, res, next) => {
    const { disaster_id, user_id, content, image_url } = req.body;

    if (!disaster_id || !user_id || !content) {
        const error = new Error('Disaster ID, User ID, and Content are required.');
        error.statusCode = 400;
        return next(error);
    }
   verification_status = 'verified'
    try {
        const { data, error } = await supabase
            .from('reports')
            .insert([{ disaster_id, user_id, content, image_url, verification_status }])
            .select('*')
            .single();

        if (error) {
            logger.error('Error creating report', { error: error.message, disasterId: disaster_id });
            return next(error);
        }

        logger.info('Report created successfully', { reportId: data.id, disasterId: disaster_id });
        res.status(201).json(data);

    } catch (dbError) {
        logger.error('Database error creating report', { error: dbError.message, disasterId: disaster_id });
        next(dbError);
    }
}